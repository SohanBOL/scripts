FORMAT: 1A
HOST: http://api.gravty.me/

# GRAVTY Member APIs

GRAVTY loyalty platform is a tool for customer engagement and loyalty management.

* Who are Members in GRAVTY?
  + A member is a user who consumes the services that GRAVTY offers. For e.g if there is a offer which
  says 50% off on food and beverages which is targeted to a Member, a Member is that user who consumes this
  offer to avail the discount

* How do the Member APIs work in GRAVTY?
  + Any new Member who enrolls in the GRAVTY program, will have a way to access the website or Mobile APP
  which points to GRAVY, via a login attribute like the unique Member ID associated with a Member
  or via Email or Mobile.
  + These APIs are authenicated using JWT tokens or Static Token which are passed in the Headers while making the API calls

* How does Authenication work in GRAVTY Member APIs?
  + Whenver a Member logs in to the Member facing app or website a JWT token is generated which has details
  about the Member who has logged in. A JWT is a temporary token which is valid for a particular time period. In
  our case in GRAVTY it is active for 4 Hours. When a Member performs any action on the app or website these Gravty
  APIs will be called with the Authentication token of the particular Member.



## Member Login  [/v1/members/login/]


### Member Login [POST]

Generate the Authorization token for the member to login and make subsequent API calls. In the response, you shall find
* `token` that represnts JWT token to be used in subsequent API calls.
* `expires_in` tells the time in seconds in which this JWT token will expire.
* `member_data` this member's basic information.


+ Request (application/json)
    + Headers

            x-api-key: "{Your API Key}"
    + Body

        {
                    "username": "username",
                    "password": "password"
        }


+ Response 201 (application/json)

        {
            "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJ1c2VyX2lkIjoyMzksInVzZXJuYW1lIjoiVVlRQ1VZQyIsImV4cCI6MTU2ODE1MDEyMCwiZW1haWwiOiJhcG9vcnZhLnNyaXZhc3RhdmErNTU0QGxqaS5pbyIsIm9yaWdfaWF0IjoxNTY4MTM1NzIwfQ.D2fTqSAzvkzLaMCwDUWtbN-5SSktN0qEv2y1pZMyhJjL96E9B74Sy4kQmgzMYAA2aZT4haoIFcOklSSdbXb-Yofi3l-W202-1_X5Vyj2dBai38-j0XfuMzGHfloAcT50ev-bCJCbSSRdG_r0PTGurXlGaAm_AKX_6U48XF5-y4FONzOaUy4hKFBGvEuDar69VzYQCj6FqVRdCJWZoxxKbTxzSBIv1vHdBR3C_gcZngSa1b2Z7NUhlgdLutqijPoPLQxP80eK6iC2ePJi9R6qgo-vJUzvRbCvdvv-dTBFM7vhqLt5ZFz_kCtFwpRqOlgXIViENrv0NRTxQj0-ey6eWQ",
            "expires_in": "14400",
            "success": true,
            "member_data": {
                "id": 81,
                "user": {
                    "email": "ap@lji.io",
                    "first_name": "Henry",
                    "last_name": "Marc"
                },
                "profile_image": null,
                "member_id": "UYQCUYC",
                "salutation": "MR",
                "middle_name": null,
                "date_of_birth": "1998-05-02",
                "age": 21,
                "gender": "male",
                "nationality": null,
                "passport_number": null,
                "creditcard_number": null,
                "mobile": "9988776656",
                "address_line1": null,
                "address_line2": null,
                "city": 3,
                "city_name": "Dubai",
                "region": 4,
                "region_name": "Dubai",
                "zipcode": null,
                "country": 2,
                "country_name": "United Arab Emirates",
                "favorite_store": null,
                "mode_of_communication": null,
                "hobbies": null,
                "enrollment_touchpoint": 1,
                "enrollment_channel": "CSC",
                "enrolling_sponsor": 1,
                "enrolling_location": null,
                "preferred_location": null,
                "date_of_joining": "2019-07-23",
                "membership_tenure": 49,
                "favorite_sponsors": [],
                "extra_data": {},
                "behaviour_value": 0.0,
                "influence_value": 0.0,
                "transaction_value": 0.0,
                "bit_value": 0.0,
                "relationship_cost": 0.0,
                "last_activity_date": "2019-09-10T10:18:00+04:00",
                "days_since_bit": 0,
                "last_accrual_date": "2019-09-03T09:41:00+04:00",
                "last_redemption_date": "2019-09-10T10:18:00+04:00",
                "merged_member": null,
                "enrollment_referrer": null,
                "validated": false,
                "version_counter": 1566812073611494,
                "program_opt_in": "YES",
                "member_type": "CONSUMER",
                "family_designation": "FAMILY_HEAD",
                "family_head": null,
                "family_head_relationship": null,
                "family_head_points_share": 0.0,
                "tier_class": "SB",
                "tier_start_date": null,
                "tier_end_date": null,
                "enrollment_user": "v@lji.io"
            }
        }

+ Response 400 (application/json)

{
    "error": {
        "message": "Invalid Credentials",
        "code": "invalid_credentials",
        "type": "ERROR",
        "status_code": 400,
        "data": null
    }
}

+ Response 400 (application/json)

{
    "error": {
        "message": "Account locked: too many login attempts. Please try again later",
        "code": "user_lockedout",
        "type": "ERROR",
        "status_code": 400,
        "data": null
    }
}


## Refresh Token [/v1/jwt/refresh-token]


### Refresh Token [POST]

* A typical JWT token is tied with a time limit after which the Token will expire. A logged in person using the app or website
should not be called out to login again and again. This API is used to reset the time limit of the JWT token and should be used in cases as mentioned above

+ Request (application/json)
    + Headers

            x-api-key: "{Your API Key}"
    + Body

        {
                    "token": "JWT token",

        }
+ Response 200 (application/json)

## Logout API [/v1/logout/]

### Logout API [POST]

* A simple API which logs out the currently existing member

+ Request (application/json)
    + Headers

            x-api-key: "{Your API Key}"
    + Body

        {}
+ Response 200 (application/json)

## Member Balance [/v1/members/<member_id>/balances/?balance_currency=usd]

### MemberBalanceConversionData (All details)[GET]

The API will be useful when points expiration details, redeemed, accrued and tag level details respective to loyalty account are needed.

+ Response 200 (application/json)

           {
               "points_expiration": [
                   {
                       "loyalty_account": "Points",
                       "expiration_date": "2019-02-03T00:00:00+03:41",
                       "points": 106
                   }
               ],
               "balances": [
                   {
                       "loyalty_account": "Points",
                       "balance": 106,
                       "balance_currency": "USD",
                       "balance_currency_amount": 42.93,
                       "total_accrued": 215,
                       "total_redeemed": null,
                       "total_expired": 160
                   }
               ]
           }


## Member Balance (only loyalty account balance information) [/v1/members/<member_id>/balances/?basicInfo=true]

### MemberBalanceConversionData (Basic information) [GET]
Balance API with the filter is useful when only loyalty accounts and its balances are needed. The response payload will contain compressed information such that response time will be fast.

Note: Optional filter balance_currency can be added. The response will contain the converted balance based on the currency provided in the filter.

Example: [/v1/members/<member_id>/balances/?basicInfo=true&balance_currency=inr]

** This Enhancement will be present in 237 release.

+ Response 200 (application/json)

           {
               "balances": [
                   {
                       "loyalty_account_id": 1,
                       "loyalty_account": "Points",
                       "balance": 106,
                       "balance_currency": "USD",
                       "balance_currency_amount": 42.93,
                   }
               ]
           }


## Family Details [/members/family/{member_id}/]

### Family Members List [GET]
Family List API which list the family members for a HEAD of the family. If the member's family_type is FAMILY_HEAD, calling this API will give the list of family members for the given family head identified by the member_id.

+ Response 200 (application/json)

        [
            {
                "id": 2,
                "user": {
                    "email": "shyam.shah@bankofloyal.com",
                    "first_name": "Shyam",
                    "last_name": "Shah"
                },
                "member_id": "ABCD123",
                "salutation": "",
                "member_name": "Shyam Shah",
                "middle_name": "",
                "date_of_birth": null,
                "gender": null,
                "mobile": "+911122334455",
                "address_line1": null,
                "address_line2": null,
                "area": null,
                "city": null,
                "region": null,
                "zipcode": null,
                "country": null,
                "enrolling_sponsor": 1,
                "enrolling_location": null,
                "enrollment_channel": "WEBSITE",
                "family_head": "guru.prasandh@bankofloyal.com",
                "family_type": "FAMILY_MEMBER",
                "facebook_id": null,
                "enrollment_referrer": "<Referrer Member ID>",
                "balances": [
                    {
                        "loyalty_account": "Points",
                        "total_accrued": 100.6,
                        "total_redeemed": 0,
                        "balance": 100.6
                    }
                ],
                "points_expiration": [
                    {
                        "points": 100.6,
                        "loyalty_account": "Points",
                        "expiration_date": "2018-05-01T23:59:59-06:37"
                    }
                ],
                "extra_data": {}
            },
            {
                "id": 3,
                "user": {
                    "email": "samir.shah@bankofloyal.com",
                    "first_name": "Samir",
                    "last_name": "Shah"
                },
                "member_id": "XYZ1234",
                "salutation": "",
                "member_name": "Samir Shah",
                "middle_name": "",
                "date_of_birth": null,
                "gender": null,
                "mobile": "+919988776655",
                "address_line1": null,
                "address_line2": null,
                "area": null,
                "city": null,
                "region": null,
                "zipcode": null,
                "country": null,
                "enrolling_sponsor": 1,
                "enrolling_location": null,
                "enrollment_channel": "WEBSITE",
                "family_head": "guru.prasandh@bankofloyal.com",
                "family_type": "FAMILY_MEMBER",
                "facebook_id": null,
                "enrollment_referrer": "<Referrer Member ID>",
                "balances": [
                    {
                        "loyalty_account": "Points",
                        "balance": 0
                    }
                ],
                "points_expiration": null,
                "extra_data": {}
            }
        ]

### Family Summary [GET /members/family_summary/{member_id}/]

Family List API which provides the summary of the family associated to the member.

+ Response 200 (application/json)

            {
                "size": 4,
                "family_head": "ABCD123"
            }

## Member Delete [/v1/members/{member_id}/]

### Member Delete [DELETE]
API to delete a member

+ Response 204

## Family Member Invite [/v1/members/family/{member_id}/invitations/]

+ Parameters
    + member_id (string) - member id of the member who wants to know the recieved or sent invitations
    + Query Params -
        + received(True or False) - gives the received invitations of member
        + sent - gives sent invitations by member
        + email - email of the invitee
        + mobile - mobile of the invitee
        + status_params - "ACCEPTED" or "REJECTED" or "PENDING"

### Create Invite [POST]
Create and send a family invite to a user.
+ Request (application/json)
    + Headers

            Authorization: "Token <token>"

+ Attributes
    + invitee_email: required (string) - Email id of invitee
    + invitee_is_minor: optional (string) - Indicates if invitee is a minor
    + invitee_dob: optional (string) - date of birth (YYYY-MM-DD) of the minor

+ Request Body (application/json)

        {

            "invitee_email": "example@example.com",
            "invitee_is_minor": true,
            "invitee_dob": "2000-12-27"

        }

+ Response 201 (application/json)

        {

            "id": 2,
            "status": "PENDING",
            "inviter_member_id": "POLI42X",
            "invitee_member_id": null,
            "invitee_email": "example@example.com",
            "invitee_mobile": null,
            "invitee_is_minor": true,
            "invitee_dob": "2000-12-27",
            "created_ts": "2019-01-28T17:53:19.525351+05:30",
            "updated_ts": "2019-01-28T17:53:19.525382+05:30"

        }

### List Invites [GET]
Lists all invites created by the inviter (family head).
+ Request (application/json)
    + Headers

            Authorization: "Token <token>"

+ Response 200 (application/json)

        [
            {

                "id": 2,
                "status": "PENDING",
                "inviter_member_id": "POLI42X",
                "invitee_member_id": null,
                "invitee_email": "example@example.com",
                "invitee_mobile": null,
                "invitee_is_minor": true,
                "invitee_dob": "2000-12-27",
                "created_ts": "2019-01-28T17:53:19.525351+05:30",
                "updated_ts": "2019-01-28T17:53:19.525382+05:30"

            }
        ]

## Retrieve Family Member Invite [/v1/members/family/{member_id}/invitations/{invitation_id}/]
+ Parameters
    + member_id (string) - member id of invitee
    + invitation_id (string) - invite id received by the invitee

### Retrieve Invite [GET]
Retrieve family invite received by invitee
+ Request (application/json)
    + Headers

            Authorization: "Token <token>"

+ Response 200 (application/json)

        {

            "id": 2,
            "status": "PENDING",
            "inviter_member_id": "POLI42X",
            "invitee_member_id": null,
            "invitee_email": "example@example.com",
            "invitee_mobile": null,
            "invitee_is_minor": true,
            "invitee_dob": "2000-12-27",
            "created_ts": "2019-01-28T17:53:19.525351+05:30",
            "updated_ts": "2019-01-28T17:53:19.525382+05:30"

        }

## Family Member Invite Action [/v1/members/family/{member_id}/invitations/{invitation_id}/action/]
+ Parameters
    + member_id (string) - member id of invitee
    + invitation_id (string) - invite id of received by the invitee

### Invite Action [POST]

Update the invite by either accepting it or rejecting it
+ Attributes
    + status: required (string) - values can be "accepted" or "rejected"
+ Request (application/json)
    + Headers

            Authorization: "Token <token>"
+ Request Body (application/json)

        {

            "status": "accepted"

        }

+ Response 200 (application/json)

        {

            "status": "accepted"

        }


## Family Delete API [/v1/members/family/{member_id}/]
+ Parameters
    + member_id (string) - member id of family head

### Delete Family [DELETE]
Delete the family group for the family head.
+ Request (application/json)
    + Headers

            Authorization: "Token <token>"

+ Response 204

## Family Leave API [/v1/members/family/{member_id}/leave/]
+ Parameters
    + member_id (string) - member id of family member

### Leave Family [POST]
Leave family group.
+ Request (application/json)
    + Headers

            Authorization: "Token <token>"

+ Response 200


## Family Point Contribution [/v1/members/family/{member_id}/contributions/?from_date=2018-01-01&to_date=2018-02-02]
+ Parameters
    + member_id (string) - member id of family head

### Get points contributions [GET]
Returns points contributed to the family head by each family member / loyalty account
+ Request (application/json)
    + Headers

            Authorization: "Token <token>"

+ Response 200 (application/json)

       {
    "family_head_member_id": "ECQIKFH",
    "total_contribution": 246,
    "contributions": {
        "SD7Y3NH": {
            "member_name": "Aakash Das",
            "loyalty_accounts_contribution": {
                "Points": 123
            }
        },
        "JCPE8L8": {
            "member_name": "Aakash kbdakdsa",
            "loyalty_accounts_contribution": {
                "Points": 123
            }
        }
    },
    "loyalty_account_contributions": {
        "Points": 246
    }
}

## Member Tier History [/v1/members/{member_id}/tier-history/]

+ Parameters
    + member_id (string) - member id of inviter


### List Tier History [GET]
Lists all the changes made to the tier class of the member.
+ Request (application/json)
    + Headers

            Authorization: "Token <token>"

+ Response 200 (application/json)

        [
            {
                "id": 41539,
                "tier_class": "GOLD",
                "expected_tier_start_date": "2018-02-01",
                "expected_tier_end_date": "2018-03-01",
                "actual_tier_start_date": "2018-02-01",
                "actual_tier_end_date": null,
                "member": "E3OMFCB"
            }
        ]

## Change Password [/v1/accounts/change-password/]
### Change Password [PUT]

+ Description
This API is used to change the current password of a member to a new password. For changing password member should know his current password.


+ Request (application/json)

    + Headers

            x-api-key: "{Your API Key}"
            Authorization: "JWT {Token}"

    + Body

            {
                "current_password": "Test123",
                "password": "Testing123"
            }


+ Response 200 (application/json)


    + Body
    {

        "status": "success",
        "message": "Password set successfully",
        "auth_key": "e157c84e94616b4684d5904ece7004238cde1de2",
        "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjozNzc4MTIxLCJ1c2VybmFtZSI6IldDTURPVDQiLCJleHAiOjE1NjMyNzI2NjEsImVtYWlsIjoiZ3JhdnR5cWErMjM2QGdtYWlsLmNvbSIsIm9yaWdfaWF0IjoxNTYzMjU4MjYxfQ.cD1cK4qEbzUpAeHu3zJUfL7uZH40e8fWcdAJMb__sHA",
        "expires_in": "14400"

    }

### Reset Password [/v1/accounts/reset-password/]



    This API is used to reset password for a member. Resetting password is a two step process:

        1. Triggering Reset Key.
        2. Updating password by submitting the reset key.

## Trigger Reset Key [POST]


     + When Trigger_Reset_key API is called then member receives 'Reset-key' in his email (email which is entered during reset password).



+ Request (application/json)

    + Headers

            x-api-key: "{Your API Key}"

    + Body

            {
                "email": "xyz@lji.io",
                "mobile": "9878787654",
                "channel": "Website"
            }


+ Response 200 (application/json)


    + Body
    {
        "status": "success"
    }



## Update Password Using Reset Key [POST /v1/accounts/do-reset-password/]


     + Last step in Password-Reset requires sending Reset-key.
     + When Reset-key is received by member in his email then this API is called and reset key is passed in this API's body.

+ Request (application/json)

    + Headers

            x-api-key: "{Your API Key}"

    + Body

            {
                "email": "xyz@lji.io",
                "new_password": "9878787654",
                "confirm_password": "Website",
                "reset_key":"514005"
            }


+ Response 200 (application/json)


    + Body
    {
        "status": "success"
    }

## Set Password [POST /v1/accounts/choose-password/]

    + Set the password of member

+ Request (application/json)

    + Headers

            x-api-key: "{Your API Key}"
            Authorization: "JWT {Token}"


    + Body

            {"password":"Test"}


+ Response 200 (application/json)


    + Body
    {
        "status": "success",
        "message": "Password set successfully",
        "auth_key": "05e3f170968bcfc0f29bb770e928c65d4086897c",
        "token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjozMiwidXNlcm5hbWUiOiJCSVU1WTVSIiwiZXhwIjoxNTY3NzcyMDgyLCJlbWFpbCI6InRlbnppbi53b3JkZW4rMkBiYW5rb2Zsb3lhbC5jb20iLCJvcmlnX2lhdCI6MTU2Nzc1NzY4Mn0.e7KBkOL-n-LnSoNr8BA59bQUlx0toQXSI1k75Qu2R80",
        "expires_in": "14400"
    }



### LookUp API [/v1/lookups/]

This API is used to get lookup values for selected lookup type.
By defaults this API returns all the lookup codes with thier types.
You can also use `type` filter in the URL to get values for a partcuklar type. E.g. `?type=GENDER`

The `name` reflects the visible name in UI. When this is used in
MemberCreate/MemberUpdate pass the `code` value in the request payload. (e.g. `female`)

## Get All GENDER [GET /v1/lookups/?type=GENDER]

+ Request (application/json)

+ Response 200 (application/json)

    + Body
    [
        {
            "id": 107,
            "type": "GENDER",
            "code": "female",
            "name": "Female",
            "active": true,
            "version_counter": 1540537269444542
        },
        {
            "id": 106,
            "type": "GENDER",
            "code": "male",
            "name": "Male",
            "active": true,
            "version_counter": 1540537269436384
        },
        {
            "id": 108,
            "type": "GENDER",
            "code": "other",
            "name": "Other",
            "active": true,
            "version_counter": 1540537269452798
        }
    ]

### Locations [/v1/countries/]

    Following are the series of API's to get the Country, Region, City and Area

    Pass the id's of the resepctive attributes in the MemberCreate/MemberUpdate request payload

## Get Countries [GET /v1/countries/]

    + This API gives the list of all counties with "id", "iso_code" and "name" of the country.


+ Request (application/json)

+ Response 200 (application/json)

    + Body
    [
    {
        "id": 1,
        "name": "Andorra",
        "iso_code": "AD",
        "version_counter": 1540537387272055
    },
    {
        "id": 2,
        "name": "United Arab Emirates",
        "iso_code": "AE",
        "version_counter": 1540537387277907
    },
    {
        "id": 3,
        "name": "Afghanistan",
        "iso_code": "AF",
        "version_counter": 1540537387283308
    }
    ]

## Get Regions [GET /v1/regions/{country_id}/]

    + This API gives the list of all regions with "id" and "name" of the region(Region is equivalent to State)

+ Request (application/json)

+ Response 200 (application/json)

    + Body
    [
    {
        "id": 4,
        "name": "Dubai",
        "version_counter": 1541910890747000
    },
    {
        "id": 5,
        "name": "Sharjah",
        "version_counter": 1542966951608212
    }
    ]

## Get Cities [GET /v1/cities/{region_id}/]

    + This API gives the list of all Cities with "id" and "name" of the cities for the selected region.

+ Request (application/json)

+ Response 200 (application/json)

    + Body
    [
    {
        "id": 3,
        "name": "Dubai",
        "version_counter": 1541910890755015
    }
    ]

## Get Area [GET /v1/areas/{city_id}/]

    + This API gives the list of all areas with "id" and "name" for the selected region.

+ Request (application/json)

+ Response 200 (application/json)

    + Body
    [
    {
        "id": 8,
        "name": "Sharjah",
        "version_counter": 1542966951623283
    },
    {
        "id": 9,
        "name": "Wasit Suburb",
        "version_counter": 1542966962914505
    }
    ]

## Sponsor List [/v1/sponsors/]

### Sponsor List [GET]

    + Get the list of sponsors

+ Request (application/json)

    + Headers

        Authorization: "JWT {Token}"


+ Response 200 (application/json)

        [
            {
                "logo": "https://gravty-ie.s3.amazonaws.com/data/9/sponsor/logos/Majid_Al_Futtaim_logo.png",
                "name": "Majid Al Futtaim",
                "description": "Founded in 1992, Majid Al Futtaim is the leading shopping mall, communities, retail and leisure pioneer across the Middle East, Africa and Asia.",
                "id": 1,
                "business_unit": null,
                "business_division": null,
                "status": "A",
                "industry": "HCOMP",
                "url": "http://www.majidalfuttaim.com/",
                "extra_data": {},
                "brand_name": null,
                "header": null
            }
        ]

## Offer List [/v1/offers/]

### Offer List [GET]

+ Get the list of Offers

It can be filtered for a offer_name, offer_type, sponsor, location_code, member_visible, status, member_id or for combination of them. For filtering, criteria have to be passed as query string parameters.


| Description       | Paramemter Name   |
|-------------------|-------------------|
| Name of the Offer | `offer_name`     |
| Type of the Offer |`offer_type`      |
| location code     | `location_code`  |
|  sponsor          | `sponsor`     |
|  member visible (boolean field) | `member_visible` |
| member id         | `member_id` |
| status            | `status`     |

+ Choices for offer_type are "award", "reward", "deal", "privilege", "enrollment"

+ To get the complete list of offers pass the Program Manager Token.
+ To get the Offers targetted to a Member pass the Member Token.

+ Request (application/json)

    + Headers

        Authorization: "JWT {Token}"


+ Response 200 (application/json)

    [
        {
            "id": 1067415883,
            "version": 4,
            "status": "launched",
            "offer_name": "Redemption for Pay-In-Points (Amount)",
            "subtitle": null,
            "offer_type": "reward",
            "price": null,
            "offer_description": "",
            "rank": null,
            "start_date": "2017-09-01T00:00:00+04:00",
            "end_date": null,
            "cost": null,
            "num_of_clients": null,
            "max_usage_per_user": null,
            "offer_acceptance_required": false,
            "twitter_share": true,
            "fb_share": true,
            "offercontextuality": null,
            "offer_launched": true,
            "presentment_description": "",
            "sponsors": [
                1
            ],
            "primary_sponsor": "1",
            "primary_sponsor_data": {
                "id": 1,
                "name": "Jumeirah Hotels",
                "short_name": "Jumeirah",
                "logo": "https://jumeirah.gravty.me/cf-data/17/sponsor/logos/bd76ab08-083b-4a66-8843-24b9990cc85f-jumeirah-hotels-resorts-vector-logo-small.png",
                "brand_name": null,
                "header": null,
                "description": "Jumeirah Hotels and Resorts is a luxury hotel company, which has had a distinct impact on the global hospitality market for the past two decades. Jumeirah has transformed the way that luxury is defined as exemplified by its flagship hotel, Burj Al Arab Jumeirah.",
                "status": "A",
                "industry": "HRS",
                "extra_data": {}
            },
            "deal_code": null,
            "products": [],
            "valid_for": null,
            "valid_period": null,
            "valid_until": null,
            "repeat_weekday": "",
            "repeat_month": "",
            "repeat_day": "",
            "locations": [],
            "locations_data": [],
            "top_three_kpis": [],
            "launch_date": null,
            "interval": null,
            "interval_period": null,
            "max_period": null,
            "scheduled_on": null,
            "scheduled_on_time": null,
            "launch_process": "326",
            "launch_process_status": "COMPLETED",
            "version_counter": 1567488613385374,
            "mobile_image": null,
            "desktop_image": null,
            "action": {
                "accepted": null,
                "rating": null,
                "version_counter": null
            },
            "average_rating": 0.0,
            "rating_count": 0,
            "availed_total": 0,
            "availed_unique": 0,
            "is_base_offer": true,
            "location_urls": {},
            "location_category": "OFFLINE",
            "landing_page_url": null,
            "member_visible": true,
            "template_params": {},
            "is_template_based": false,
            "template_name": null,
            "member_target_json": null,
            "member_target_xml": null,
            "member_target_type": "all",
            "allow_sponsorfollowers": false,
            "send_notification": false,
            "non_cumulative": false,
            "priority": null,
            "non_cumulative_level": null
        }
    ]



## Member Wishlist [/v1/members/{member_id}/wishlist/]
This API specifies offers in which a member is interested by adding these offers to wish list. Using this API a member can retrive/delete offers from its wishlist.


### Add Offers to Wishlist [POST]


| Attribute Name    | Description       |
|-------------------|-------------------|
| `member_id`       |  member id        |
| `offer_id`        | ID of the offer to be added in wishlist|
| `success`         | List of offers which are successfully added in wishlist.|
| `failure`         | List of offers which are not added in wishlist.|

* Insert offers to member's wishlist.
* Accept offer IDs to be added in wishlist.
* `integrity_error` : When an offer is already added in member's wishlist. In such case no
offer will be added in the wishlist and integrity_error will be thrown.
+ Parameters
    + member_id (string) - ID of the member.

+ Request (application/json)

    + Headers

            Authorization: {Token}

    + Body

            [
              {
                "offer_id": 123
              },
              {
                "offer_id": 22
              },
              {
                "offer_id": 31
              },
              {
                "offer_id": 6
              },
              {
                "offer_id": 7
              }
            ]

+ Response 200 (application/json)

        {
          "success": [
            {
              "offer_id": 6
            }
          ],
          "failure": [
            {
              "offer_id": 123
            },
            {
              "offer_id": 22
            },
            {
              "offer_id": 31
            },
            {
              "offer_id": 7
            }
          ]
        }

+ Response 404 (application/json)

        {
        "error": {
        "message": "No member exists with the given id",
        "code": "MEMBER_NOT_FOUND",
        "type": "ERROR",
        "status_code": 404,
        "data": null,
        "scope": "global"
        }
        }


+ Response 400 (application/json)

        {
            "error": {
                "code": "integrity_error",
                "message": "The request was unsuccessful as the change violates integrity with one or more objects"
            }
        }

### Remove Offers from Wishlist [DELETE]


| Attribute Name    | Description       |
|-------------------|-------------------|
| `member_id`       |  member id        |
| `offer_id`        | ID of the offer to be added in wishlist|
| `removed`         | List of offers which are successfully removed from wishlist|
| `failure`         | List of offers which are not removed from wishlist.|

* Remove offers from member's wishlist.
* Accept offer IDs to be removed from wishlist.

+ Parameters
    + member_id (string) - ID of the member.

+ Request (application/json)

    + Headers

            Authorization: {Token}

    + Body

            [
                {
                    "offer_id":123
                },{
                    "offer_id":22
                },{
                    "offer_id":31
                },{
                    "offer_id":6
                },{
                    "offer_id":7
                }
            ]

+ Response 200 (application/json)

        {
          "removed": [
            {
              "offer_id": 6
            }
          ],
          "failure": [
            {
              "offer_id": 123
            },
            {
              "offer_id": 22
            },
            {
              "offer_id": 31
            },
            {
              "offer_id": 7
            }
          ]
        }


+ Response 404 (application/json)

        {
          "error": {
            "message": "No member exists with the given id",
            "code": "MEMBER_NOT_FOUND",
            "type": "ERROR",
            "status_code": 404,
            "data": null,
            "scope": "global"
          }
        }

+ Request (application/json)

    + Headers

            Authorization: {Token}

+ Response 400 (application/json)

        {
            "message": "Please provide offer IDs to be removed from wishlist."
        }

+ Response 404 (application/json)

        {
            "error": {
                "message": "No member exists with the given id",
                "code": "MEMBER_NOT_FOUND",
                "type": "ERROR",
                "status_code": 404,
                "data": null,
                "scope": "global"
            }
        }


### Get all Offers from Wishlist [GET]

| Attribute Name    | Description       |
|-------------------|-------------------|
| `member_id`       |  member id        |
| `offer`           | Offer in wishlist |

* Fetch offers from member's wishlist.

+ Parameters
    + member_id (string) - ID of the member.

+ Request (application/json)

    + Headers

            Authorization: {Token}

+ Response 200 (application/json)

        [
          {
            "offer": {
              "id": 1,
              "version": 120,
              "status": "launched",
              "offer_name": "First Citizen_enrollment_offer",
              "subtitle": null,
              "offer_type": "enrollment",
              "price": null,
              "offer_description": "Enrollment Offer for the current program",
              "rank": null,
              "start_date": "2019-06-03T15:36:40+05:30",
              "end_date": null,
              "cost": null,
              "num_of_clients": null,
              "max_usage_per_user": 0,
              "frequency": "",
              "offer_acceptance_required": false,
              "twitter_share": false,
              "fb_share": false,
              "offercontextuality": null,
              "offer_launched": true,
              "presentment_description": "",
              "sponsors": [
                1
              ],
              "primary_sponsor": "1",
              "primary_sponsor_data": {
                "id": 1,
                "name": "K Raheja Corp",
                "short_name": "K",
                "logo": "https://shoppersstop.qav2.gravtee.com/cf-data/184/sponsor/logos/42b3ac74-30e2-4275-ac76-70d7884159e8-logo.png",
                "brand_name": null,
                "header": null,
                "description": "K Raheja Corp is an Indian conglomerate, which provides services across real estate, retail and hospitality. Headquartered in Mumbai, The group has made an impact on the supply side of the modern day living.",
                "status": "A",
                "industry": "DPT",
                "extra_data": {},
                "sponsor_timings": []
              },
              "deal_code": null,
              "products": [],
              "valid_for": null,
              "valid_period": null,
              "valid_until": null,
              "repeat_weekday": null,
              "repeat_month": null,
              "repeat_day": null,
              "locations": [],
              "locations_data": [],
              "top_three_kpis": [
                {
                  "id": 1,
                  "offer": 1,
                  "target": 0,
                  "current_value": 0,
                  "active": true,
                  "current_kpi": 1,
                  "kpi": 1,
                  "kpi_code": "TOTAL_SALES_OFFER",
                  "kpi_name": "Total Sales Influenced by the Offer",
                  "kpi_description": "Total Sales Influenced by the Offer",
                  "version_counter": 1559555454047886
                },
                {
                  "id": 2,
                  "offer": 1,
                  "target": 0,
                  "current_value": 0,
                  "active": true,
                  "current_kpi": 2,
                  "kpi": 2,
                  "kpi_code": "TOTAL_COST",
                  "kpi_name": "Total Cost Incurred",
                  "kpi_description": "Total Cost Incurred",
                  "version_counter": 1559555454056689
                },
                {
                  "id": 3,
                  "offer": 1,
                  "target": 0,
                  "current_value": 0,
                  "active": true,
                  "current_kpi": 3,
                  "kpi": 3,
                  "kpi_code": "ACTIVATION_PCT",
                  "kpi_name": "No. of Activations as a Percentage of Targeted Members",
                  "kpi_description": "No. of Activations as a Percentage of Targeted Members",
                  "version_counter": 1559555454064497
                }
              ],
              "launch_date": "2019-06-03",
              "interval": null,
              "interval_period": 1,
              "max_period": null,
              "scheduled_on": null,
              "scheduled_on_time": null,
              "launch_process": "336",
              "launch_process_status": "COMPLETED",
              "version_counter": 1581594074403304,
              "mobile_image": null,
              "desktop_image": null,
              "action": {},
              "average_rating": 0,
              "rating_count": 0,
              "availed_total": 8411,
              "availed_unique": 0,
              "is_base_offer": false,
              "location_urls": null,
              "location_category": "OFFLINE",
              "landing_page_url": null,
              "member_visible": true,
              "template_params": {},
              "is_template_based": false,
              "template_name": null,
              "member_target_json": null,
              "member_target_xml": null,
              "member_target_type": "all",
              "allow_sponsorfollowers": false,
              "send_notification": false,
              "non_cumulative": false,
              "priority": null,
              "non_cumulative_level": null,
              "extra_data": {},
              "product_targeting_type": null,
              "product_targeting_count": null,
              "product_targeting_file": null,
              "term_and_condition": null,
              "is_product_targeting": false,
              "featured": false,
              "featured_rank": null,
              "sponsorship_details": [
                {
                  "sponsor": 1,
                  "sponsorship_percentage": 100,
                  "sponsor_name": "K Raheja Corp"
                }
              ]
            }
          }
        ]

+ Response 404 (application/json)

        {
            "error": {
                "message": "No member exists with the given id",
                "code": "MEMBER_NOT_FOUND",
                "type": "ERROR",
                "status_code": 404,
                "data": null,
                "scope": "global"
            }
        }


